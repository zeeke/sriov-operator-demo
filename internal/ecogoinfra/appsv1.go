// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/kubernetes/typed/apps/v1 (interfaces: AppsV1Interface)
//
// Generated by this command:
//
//	mockgen -package ecogoinfra k8s.io/client-go/kubernetes/typed/apps/v1 AppsV1Interface
//

// Package ecogoinfra is a generated GoMock package.
package ecogoinfra

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/client-go/kubernetes/typed/apps/v1"
	rest "k8s.io/client-go/rest"
)

// MockAppsV1Interface is a mock of AppsV1Interface interface.
type MockAppsV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockAppsV1InterfaceMockRecorder
	isgomock struct{}
}

// MockAppsV1InterfaceMockRecorder is the mock recorder for MockAppsV1Interface.
type MockAppsV1InterfaceMockRecorder struct {
	mock *MockAppsV1Interface
}

// NewMockAppsV1Interface creates a new mock instance.
func NewMockAppsV1Interface(ctrl *gomock.Controller) *MockAppsV1Interface {
	mock := &MockAppsV1Interface{ctrl: ctrl}
	mock.recorder = &MockAppsV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppsV1Interface) EXPECT() *MockAppsV1InterfaceMockRecorder {
	return m.recorder
}

// ControllerRevisions mocks base method.
func (m *MockAppsV1Interface) ControllerRevisions(namespace string) v1.ControllerRevisionInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerRevisions", namespace)
	ret0, _ := ret[0].(v1.ControllerRevisionInterface)
	return ret0
}

// ControllerRevisions indicates an expected call of ControllerRevisions.
func (mr *MockAppsV1InterfaceMockRecorder) ControllerRevisions(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerRevisions", reflect.TypeOf((*MockAppsV1Interface)(nil).ControllerRevisions), namespace)
}

// DaemonSets mocks base method.
func (m *MockAppsV1Interface) DaemonSets(namespace string) v1.DaemonSetInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DaemonSets", namespace)
	ret0, _ := ret[0].(v1.DaemonSetInterface)
	return ret0
}

// DaemonSets indicates an expected call of DaemonSets.
func (mr *MockAppsV1InterfaceMockRecorder) DaemonSets(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DaemonSets", reflect.TypeOf((*MockAppsV1Interface)(nil).DaemonSets), namespace)
}

// Deployments mocks base method.
func (m *MockAppsV1Interface) Deployments(namespace string) v1.DeploymentInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deployments", namespace)
	ret0, _ := ret[0].(v1.DeploymentInterface)
	return ret0
}

// Deployments indicates an expected call of Deployments.
func (mr *MockAppsV1InterfaceMockRecorder) Deployments(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deployments", reflect.TypeOf((*MockAppsV1Interface)(nil).Deployments), namespace)
}

// RESTClient mocks base method.
func (m *MockAppsV1Interface) RESTClient() rest.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(rest.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient.
func (mr *MockAppsV1InterfaceMockRecorder) RESTClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*MockAppsV1Interface)(nil).RESTClient))
}

// ReplicaSets mocks base method.
func (m *MockAppsV1Interface) ReplicaSets(namespace string) v1.ReplicaSetInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicaSets", namespace)
	ret0, _ := ret[0].(v1.ReplicaSetInterface)
	return ret0
}

// ReplicaSets indicates an expected call of ReplicaSets.
func (mr *MockAppsV1InterfaceMockRecorder) ReplicaSets(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicaSets", reflect.TypeOf((*MockAppsV1Interface)(nil).ReplicaSets), namespace)
}

// StatefulSets mocks base method.
func (m *MockAppsV1Interface) StatefulSets(namespace string) v1.StatefulSetInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatefulSets", namespace)
	ret0, _ := ret[0].(v1.StatefulSetInterface)
	return ret0
}

// StatefulSets indicates an expected call of StatefulSets.
func (mr *MockAppsV1InterfaceMockRecorder) StatefulSets(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatefulSets", reflect.TypeOf((*MockAppsV1Interface)(nil).StatefulSets), namespace)
}
